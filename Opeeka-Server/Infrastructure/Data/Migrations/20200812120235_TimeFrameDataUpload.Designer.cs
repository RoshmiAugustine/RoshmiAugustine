// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Opeeka.PICS.Infrastructure.Data;

namespace Opeeka.PICS.Infrastructure.Data.Migrations
{
    [DbContext(typeof(OpeekaDBContext))]
    [Migration("20200812120235_TimeFrameDataUpload")]
    partial class TimeFrameDataUpload
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("IdentityRole");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityRoleClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserClaim");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("IdentityUserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserToken");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Address", b =>
                {
                    b.Property<long>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AddressIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryStateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip4")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.HasIndex("AddressIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CountryStateId");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Agency", b =>
                {
                    b.Property<long>("AgencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<Guid>("AgencyIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<string>("ContactFirstName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("ContactLastName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Note")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<string>("Phone1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("AgencyID");

                    b.HasIndex("AgencyIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Agency");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AgencyAddress", b =>
                {
                    b.Property<long>("AgencyAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressID")
                        .HasColumnType("bigint");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("AgencyAddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("AgencyAddress");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AgencyContact", b =>
                {
                    b.Property<int>("AgencyContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int?>("ListOrder")
                        .HasColumnType("int");

                    b.HasKey("AgencyContactID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("ContactID");

                    b.ToTable("AgencyContact");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AgencySharing", b =>
                {
                    b.Property<int>("AgencySharingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<Guid>("AgencySharingIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int?>("AgencySharingPolicyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HistoricalView")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ReportingUnitID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AgencySharingID");

                    b.HasIndex("AgencySharingIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("AgencySharing");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AgencySharingHistory", b =>
                {
                    b.Property<int>("AgencySharingHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HistoricalView")
                        .HasColumnType("bit");

                    b.Property<int?>("RemovedNoteID")
                        .HasColumnType("int");

                    b.Property<int?>("RemovedUserID")
                        .HasColumnType("int");

                    b.Property<long>("ReportingUnitAgencyID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AgencySharingHistoryID");

                    b.HasIndex("ReportingUnitAgencyID");

                    b.ToTable("AgencySharingHistory");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AgencySharingPolicy", b =>
                {
                    b.Property<int>("AgencySharingPolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencySharingID")
                        .HasColumnType("int");

                    b.Property<int>("SharingPolicyID")
                        .HasColumnType("int");

                    b.HasKey("AgencySharingPolicyID");

                    b.ToTable("AgencySharingPolicy");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ApplicationObject", b =>
                {
                    b.Property<int>("ApplicationObjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationObjectTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("ApplicationObjectID");

                    b.HasIndex("ApplicationObjectTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("ApplicationObject");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ApplicationObjectType", b =>
                {
                    b.Property<int>("ApplicationObjectTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("ApplicationObjectTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("ApplicationObjectType");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<long?>("AgencyId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<Guid>("UserIndex")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName", "AgencyId")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL AND [AgencyId] IS NOT NULL");

                    b.ToTable("IdentityUsers");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Assessment", b =>
                {
                    b.Property<int>("AssessmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Approved")
                        .HasColumnType("int");

                    b.Property<int>("AssessmentReasonID")
                        .HasColumnType("int");

                    b.Property<int>("AssessmentStatusID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpdate")
                        .HasColumnType("bit");

                    b.Property<long>("PersonQuestionnaireID")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonQuestionnaireScheduleID")
                        .HasColumnType("bigint");

                    b.Property<string>("ReasoningText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.Property<int>("VoiceTypeID")
                        .HasColumnType("int");

                    b.HasKey("AssessmentID");

                    b.HasIndex("AssessmentReasonID");

                    b.HasIndex("AssessmentStatusID");

                    b.HasIndex("PersonQuestionnaireID");

                    b.HasIndex("PersonQuestionnaireScheduleID");

                    b.HasIndex("UpdateUserID");

                    b.HasIndex("VoiceTypeID");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentEmailLinkDetails", b =>
                {
                    b.Property<int>("AssessmentEmailLinkDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentID")
                        .HasColumnType("int");

                    b.Property<Guid>("EmailLinkDetailsIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int>("HelperID")
                        .HasColumnType("int");

                    b.Property<Guid>("PersonIndex")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PersonSupportEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonSupportID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("AssessmentEmailLinkDetailsID")
                        .HasName("AssessmentEmailLinkDetailsID");

                    b.HasIndex("AssessmentID");

                    b.HasIndex("HelperID");

                    b.HasIndex("PersonSupportID");

                    b.HasIndex("QuestionnaireID");

                    b.ToTable("AssessmentEmailLinkDetails");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentNote", b =>
                {
                    b.Property<int>("AssessmentNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentID")
                        .HasColumnType("int");

                    b.Property<int?>("AssessmentReviewHistoryID")
                        .HasColumnType("int");

                    b.Property<int>("NoteID")
                        .HasColumnType("int");

                    b.HasKey("AssessmentNoteID");

                    b.HasIndex("AssessmentID");

                    b.HasIndex("AssessmentReviewHistoryID");

                    b.HasIndex("NoteID");

                    b.ToTable("AssessmentNote");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentReason", b =>
                {
                    b.Property<int>("AssessmentReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("AssessmentReasonID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("AssessmentReason","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentResponse", b =>
                {
                    b.Property<int>("AssessmentResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentID")
                        .HasColumnType("int");

                    b.Property<bool>("IsCloned")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOtherConfidential")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPersonRequestedConfidential")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequiredConfidential")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemResponseBehaviorID")
                        .HasColumnType("int");

                    b.Property<int?>("PersonSupportID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireItemID")
                        .HasColumnType("int");

                    b.Property<int>("ResponseID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("AssessmentResponseID");

                    b.HasIndex("AssessmentID");

                    b.HasIndex("ItemResponseBehaviorID");

                    b.HasIndex("PersonSupportID");

                    b.HasIndex("QuestionnaireItemID");

                    b.HasIndex("ResponseID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("AssessmentResponse");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentResponseNote", b =>
                {
                    b.Property<int>("AssessmentResponseNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentResponseID")
                        .HasColumnType("int");

                    b.Property<int>("NoteID")
                        .HasColumnType("int");

                    b.HasKey("AssessmentResponseNoteID");

                    b.HasIndex("AssessmentResponseID");

                    b.HasIndex("NoteID");

                    b.ToTable("AssessmentResponseNote");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentResponseText", b =>
                {
                    b.Property<int>("AssessmentResponseTextID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentResponseID")
                        .HasColumnType("int");

                    b.Property<string>("ResponseText")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("AssessmentResponseTextID");

                    b.HasIndex("AssessmentResponseID");

                    b.ToTable("AssessmentResponseText");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentStatus", b =>
                {
                    b.Property<int>("AssessmentStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("AssessmentStatusID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("AssessmentStatus","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Attachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContextType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttachmentId");

                    b.ToTable("Attachment","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AuditDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("EntityState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceKeyValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tenant")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditDetails");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AuditFieldName", b =>
                {
                    b.Property<string>("FieldName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FieldName");

                    b.ToTable("AuditFieldName");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AuditTableName", b =>
                {
                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TableName");

                    b.ToTable("AuditTableName");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryFocusID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Category","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CategoryFocus", b =>
                {
                    b.Property<int>("CategoryFocusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("CategoryFocusID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("CategoryFocus","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Collaboration", b =>
                {
                    b.Property<int>("CollaborationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CollaborationIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int?>("CollaborationLeadUserID")
                        .HasColumnType("int");

                    b.Property<int>("CollaborationLevelID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IntervalDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportingUnitID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TherapyTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("CollaborationID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("CollaborationIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("CollaborationLevelID");

                    b.HasIndex("TherapyTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Collaboration");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationAgencyAddress", b =>
                {
                    b.Property<int>("CollaborationID")
                        .HasColumnType("int");

                    b.Property<long>("AddressID")
                        .HasColumnType("bigint");

                    b.HasKey("CollaborationID", "AddressID");

                    b.HasIndex("AddressID");

                    b.ToTable("CollaborationAgencyAddress");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationLeadHistory", b =>
                {
                    b.Property<int>("CollaborationLeadHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollaborationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int?>("LeadUserID")
                        .HasColumnType("int");

                    b.Property<int?>("RemovedUserID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CollaborationLeadHistoryID");

                    b.HasIndex("CollaborationID");

                    b.ToTable("CollaborationLeadHistory");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationLevel", b =>
                {
                    b.Property<int>("CollaborationLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("CollaborationLevelID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("CollaborationLevel","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationQuestionnaire", b =>
                {
                    b.Property<int>("CollaborationQuestionnaireID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollaborationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CollaborationQuestionnaireID");

                    b.HasIndex("CollaborationID");

                    b.HasIndex("QuestionnaireID");

                    b.ToTable("CollaborationQuestionnaire");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationSharing", b =>
                {
                    b.Property<int>("CollaborationSharingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<int>("CollaborationID")
                        .HasColumnType("int");

                    b.Property<Guid>("CollaborationSharingIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<int?>("CollaborationSharingPolicyID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HistoricalView")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ReportingUnitID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CollaborationSharingID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("CollaborationID");

                    b.HasIndex("CollaborationSharingIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ReportingUnitID");

                    b.ToTable("CollaborationSharing");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationSharingHistory", b =>
                {
                    b.Property<int>("CollaborationSharingHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HistoricalView")
                        .HasColumnType("bit");

                    b.Property<int?>("RemovedNoteID")
                        .HasColumnType("int");

                    b.Property<int?>("RemovedUserID")
                        .HasColumnType("int");

                    b.Property<int>("ReportingUnitCollaborationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CollaborationSharingHistoryID");

                    b.HasIndex("ReportingUnitCollaborationID");

                    b.ToTable("CollaborationSharingHistory");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationSharingPolicy", b =>
                {
                    b.Property<int>("CollaborationSharingPolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollaborationSharingID")
                        .HasColumnType("int");

                    b.Property<int>("SharingPolicyID")
                        .HasColumnType("int");

                    b.HasKey("CollaborationSharingPolicyID");

                    b.HasIndex("CollaborationSharingID");

                    b.HasIndex("SharingPolicyID");

                    b.ToTable("CollaborationSharingPolicy");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationTag", b =>
                {
                    b.Property<int>("CollaborationTagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollaborationID")
                        .HasColumnType("int");

                    b.Property<int>("CollaborationTagTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.HasKey("CollaborationTagID");

                    b.HasIndex("CollaborationID");

                    b.HasIndex("CollaborationTagTypeID");

                    b.ToTable("CollaborationTag");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationTagType", b =>
                {
                    b.Property<int>("CollaborationTagTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("CollaborationTagTypeID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("CollaborationTagType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ColorPalette", b =>
                {
                    b.Property<int>("ColorPaletteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RGB")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("ColorPaletteID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("ColorPalette","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Configuration", b =>
                {
                    b.Property<int>("ConfigurationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfigurationParameterContextID")
                        .HasColumnType("int");

                    b.Property<int>("ContextFKValue")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationID");

                    b.HasIndex("ConfigurationParameterContextID");

                    b.ToTable("Configuration","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ConfigurationAttachment", b =>
                {
                    b.Property<int>("ConfigurationAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttachmentID")
                        .HasColumnType("int");

                    b.Property<int>("ConfigurationID")
                        .HasColumnType("int");

                    b.HasKey("ConfigurationAttachmentID");

                    b.HasIndex("AttachmentID");

                    b.HasIndex("ConfigurationID");

                    b.ToTable("ConfigurationAttachment","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ConfigurationContext", b =>
                {
                    b.Property<int>("ConfigurationContextID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FKValueRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentContextID")
                        .HasColumnType("int");

                    b.HasKey("ConfigurationContextID");

                    b.HasIndex("ParentContextID");

                    b.ToTable("ConfigurationContext","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ConfigurationParameter", b =>
                {
                    b.Property<int>("ConfigurationParameterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<bool>("CanModify")
                        .HasColumnType("bit");

                    b.Property<int>("ConfigurationValueTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("Deprecated")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationParameterID");

                    b.HasIndex("ConfigurationValueTypeID");

                    b.ToTable("ConfigurationParameter","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ConfigurationParameterContext", b =>
                {
                    b.Property<int>("ConfigurationParameterContextID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConfigurationContextID")
                        .HasColumnType("int");

                    b.Property<int>("ConfigurationParameterID")
                        .HasColumnType("int");

                    b.HasKey("ConfigurationParameterContextID");

                    b.HasIndex("ConfigurationContextID");

                    b.HasIndex("ConfigurationParameterID");

                    b.ToTable("ConfigurationParameterContext","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ConfigurationValueType", b =>
                {
                    b.Property<int>("ConfigurationValueTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationValueTypeID");

                    b.ToTable("ConfigurationValueType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactID");

                    b.HasIndex("ContactTypeID");

                    b.ToTable("Contact","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ContactType", b =>
                {
                    b.Property<int>("ContactTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("ContactTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("ContactType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("CountryID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Country","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CountryState", b =>
                {
                    b.Property<int>("CountryStateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("CountryStateID");

                    b.HasIndex("CountryID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("CountryState","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("GenderID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Gender","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Helper", b =>
                {
                    b.Property<int>("HelperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<Guid>("HelperIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID ( )");

                    b.Property<int?>("HelperTitleID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("ReviewerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupervisorHelperID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("HelperID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("HelperIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("HelperTitleID");

                    b.HasIndex("ReviewerID");

                    b.HasIndex("SupervisorHelperID");

                    b.HasIndex("UpdateUserID");

                    b.HasIndex("UserID");

                    b.ToTable("Helper");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.HelperAddress", b =>
                {
                    b.Property<int>("HelperAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressID")
                        .HasColumnType("bigint");

                    b.Property<Guid>("HelperAddressIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID ( )");

                    b.Property<int>("HelperID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasKey("HelperAddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("HelperAddressIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("HelperID");

                    b.ToTable("HelperAddress");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.HelperContact", b =>
                {
                    b.Property<int>("HelperContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int>("HelperID")
                        .HasColumnType("int");

                    b.Property<int?>("ListOrder")
                        .HasColumnType("int");

                    b.HasKey("HelperContactID");

                    b.HasIndex("ContactID");

                    b.HasIndex("HelperID");

                    b.ToTable("HelperContact");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.HelperTitle", b =>
                {
                    b.Property<int>("HelperTitleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("HelperTitleID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("HelperTitle","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.IdentificationType", b =>
                {
                    b.Property<int>("IdentificationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("IdentificationTypeID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("IdentificationType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Instrument", b =>
                {
                    b.Property<int>("InstrumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Authors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstrumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("InstrumentID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Instrument","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.InstrumentAgency", b =>
                {
                    b.Property<int>("InstrumentAgencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<int>("InstrumentID")
                        .HasColumnType("int");

                    b.HasKey("InstrumentAgencyID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("InstrumentID");

                    b.ToTable("InstrumentAgency");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Item", b =>
                {
                    b.Property<int>("ItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Considerations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<Guid>("ItemIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID ( )");

                    b.Property<int>("ItemResponseTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResponseValueTypeID")
                        .HasColumnType("int");

                    b.Property<string>("SupplementalDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.Property<bool>("UseOtherConfidentiality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("UsePersonRequestedConfidentiality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("UseRequiredConfidentiality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("ItemID");

                    b.HasIndex("ItemIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ItemResponseTypeID");

                    b.HasIndex("ResponseValueTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ItemResponseBehavior", b =>
                {
                    b.Property<int>("ItemResponseBehaviorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ItemResponseTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("ItemResponseBehaviorID");

                    b.HasIndex("ItemResponseTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("ItemResponseBehavior","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ItemResponseType", b =>
                {
                    b.Property<int>("ItemResponseTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("ItemResponseTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("ItemResponseType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Language", b =>
                {
                    b.Property<int>("LanguageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("LanguageID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Language","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("NoteText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("NoteID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationDelivery", b =>
                {
                    b.Property<int>("NotificationDeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationLogID")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTemplateID")
                        .HasColumnType("int");

                    b.HasKey("NotificationDeliveryID");

                    b.HasIndex("NotificationLogID");

                    b.HasIndex("NotificationTemplateID");

                    b.ToTable("NotificationDelivery");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationLevel", b =>
                {
                    b.Property<int>("NotificationLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("RequireResolution")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationLevelID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("NotificationTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("NotificationLevel","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationLog", b =>
                {
                    b.Property<int>("NotificationLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FKeyValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationResolutionStatusID")
                        .HasColumnType("int");

                    b.Property<int>("NotificationTypeID")
                        .HasColumnType("int");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationLogID");

                    b.HasIndex("NotificationResolutionStatusID");

                    b.HasIndex("NotificationTypeID");

                    b.HasIndex("PersonID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("NotificationLog");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationMode", b =>
                {
                    b.Property<int>("NotificationModeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationModeID");

                    b.ToTable("NotificationMode","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationResolutionHistory", b =>
                {
                    b.Property<int>("NotificationResolutionHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationLogID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusFrom")
                        .HasColumnType("int");

                    b.Property<int>("StatusTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationResolutionHistoryID");

                    b.HasIndex("NotificationLogID");

                    b.HasIndex("StatusFrom");

                    b.HasIndex("StatusTo");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("NotificationResolutionHistory");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationResolutionNote", b =>
                {
                    b.Property<int>("NotificationResolutionNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Note_NoteID")
                        .HasColumnType("int");

                    b.Property<int>("NotificationLogID")
                        .HasColumnType("int");

                    b.Property<int?>("NotificationResolutionHistoryID")
                        .HasColumnType("int");

                    b.HasKey("NotificationResolutionNoteID");

                    b.HasIndex("Note_NoteID");

                    b.HasIndex("NotificationLogID");

                    b.HasIndex("NotificationResolutionHistoryID");

                    b.ToTable("NotificationResolutionNote");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationResolutionStatus", b =>
                {
                    b.Property<int>("NotificationResolutionStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationResolutionStatusID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("NotificationResolutionStatus","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationTemplate", b =>
                {
                    b.Property<int>("NotificationTemplateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationLevelID")
                        .HasColumnType("int");

                    b.Property<int>("NotificationModeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TemplateText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationTemplateID");

                    b.HasIndex("NotificationLevelID");

                    b.HasIndex("NotificationModeID");

                    b.ToTable("NotificationTemplate");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("NotificationType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotifyReminder", b =>
                {
                    b.Property<int>("NotifyReminderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("NotifyDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PersonQuestionnaireScheduleID")
                        .HasColumnType("bigint");

                    b.Property<int>("QuestionnaireReminderRuleID")
                        .HasColumnType("int");

                    b.HasKey("NotifyReminderID");

                    b.HasIndex("PersonQuestionnaireScheduleID");

                    b.HasIndex("QuestionnaireReminderRuleID");

                    b.ToTable("NotifyReminder");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotifyRisk", b =>
                {
                    b.Property<int>("NotifyRiskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NotifyDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<int>("QuestionnaireNotifyRiskRuleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("NotifyRiskID");

                    b.HasIndex("AssessmentID");

                    b.HasIndex("PersonID");

                    b.HasIndex("QuestionnaireNotifyRiskRuleID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("NotifyRisk");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotifyRiskRule", b =>
                {
                    b.Property<int>("NotifyRiskRuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationLevelID")
                        .HasColumnType("int");

                    b.Property<int>("NotifyThresholdMinimumListOrder")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireItemID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("NotifyRiskRuleID");

                    b.HasIndex("NotificationLevelID");

                    b.HasIndex("QuestionnaireItemID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("NotifyRiskRule");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotifyRiskValue", b =>
                {
                    b.Property<int>("NotifyRiskValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentResponseID")
                        .HasColumnType("int");

                    b.Property<int>("AssessmentResponseValue")
                        .HasColumnType("int");

                    b.Property<int>("NotifyRiskID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireNotifyRiskRuleConditionID")
                        .HasColumnType("int");

                    b.HasKey("NotifyRiskValueID");

                    b.HasIndex("AssessmentResponseID");

                    b.HasIndex("NotifyRiskID");

                    b.HasIndex("QuestionnaireNotifyRiskRuleConditionID");

                    b.ToTable("NotifyRiskValue");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.OperationType", b =>
                {
                    b.Property<int>("OperationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("OperationTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("OperationType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationObjectID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<int>("OperationTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("PermissionID");

                    b.HasIndex("ApplicationObjectID");

                    b.HasIndex("OperationTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Permission","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Person", b =>
                {
                    b.Property<long>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<int?>("BiologicalSexID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("GenderID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<Guid>("PersonIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID ( )");

                    b.Property<int>("PersonScreeningStatusID")
                        .HasColumnType("int");

                    b.Property<string>("Phone1")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone1Code")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Phone2")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone2Code")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("PreferredLanguageID")
                        .HasColumnType("int");

                    b.Property<int?>("PrimaryLanguageID")
                        .HasColumnType("int");

                    b.Property<int?>("SexualityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Suffix")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("PersonID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("BiologicalSexID");

                    b.HasIndex("GenderID");

                    b.HasIndex("PersonIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("PersonScreeningStatusID");

                    b.HasIndex("PreferredLanguageID");

                    b.HasIndex("PrimaryLanguageID");

                    b.HasIndex("SexualityID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonAddress", b =>
                {
                    b.Property<long>("PersonAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.HasKey("PersonAddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonAddress");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonCollaboration", b =>
                {
                    b.Property<long>("PersonCollaborationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CollaborationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnrollDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("PersonCollaborationID");

                    b.HasIndex("CollaborationID");

                    b.HasIndex("PersonID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("PersonCollaboration");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonContact", b =>
                {
                    b.Property<long>("PersonContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int?>("ListOrder")
                        .HasColumnType("int");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.HasKey("PersonContactID");

                    b.HasIndex("ContactID");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonContact");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonHelper", b =>
                {
                    b.Property<long>("PersonHelperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HelperID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("PersonHelperID");

                    b.HasIndex("HelperID");

                    b.HasIndex("PersonID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("PersonHelper");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonIdentification", b =>
                {
                    b.Property<long>("PersonIdentificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<int>("IdentificationTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("PersonIdentificationID");

                    b.HasIndex("IdentificationTypeID");

                    b.HasIndex("PersonID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("PersonIdentification");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonLanguage", b =>
                {
                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageID")
                        .HasColumnType("int");

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.HasKey("PersonID", "LanguageID");

                    b.HasIndex("LanguageID");

                    b.ToTable("PersonLanguage");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonNote", b =>
                {
                    b.Property<long>("PersonNoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NoteID")
                        .HasColumnType("int");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.HasKey("PersonNoteID");

                    b.HasIndex("NoteID");

                    b.HasIndex("PersonID");

                    b.ToTable("PersonNote");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonQuestionnaire", b =>
                {
                    b.Property<long>("PersonQuestionnaireID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CollaborationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("PersonQuestionnaireID");

                    b.HasIndex("CollaborationID");

                    b.HasIndex("PersonID");

                    b.HasIndex("QuestionnaireID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("PersonQuestionnaire");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonQuestionnaireMetrics", b =>
                {
                    b.Property<long>("PersonQuestionnaireMetricsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("InstrumentID")
                        .HasColumnType("int");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int>("NeedsAddressed")
                        .HasColumnType("int");

                    b.Property<int>("NeedsAddressing")
                        .HasColumnType("int");

                    b.Property<int>("NeedsEver")
                        .HasColumnType("int");

                    b.Property<int>("NeedsIdentified")
                        .HasColumnType("int");

                    b.Property<int>("NeedsImproved")
                        .HasColumnType("int");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<int>("PersonQuestionnaireID")
                        .HasColumnType("int");

                    b.Property<int>("StrengthsBuilding")
                        .HasColumnType("int");

                    b.Property<int>("StrengthsBuilt")
                        .HasColumnType("int");

                    b.Property<int>("StrengthsEver")
                        .HasColumnType("int");

                    b.Property<int>("StrengthsIdentified")
                        .HasColumnType("int");

                    b.Property<int>("StrengthsImproved")
                        .HasColumnType("int");

                    b.HasKey("PersonQuestionnaireMetricsID");

                    b.ToTable("PersonQuestionnaireMetrics","dbo");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonQuestionnaireSchedule", b =>
                {
                    b.Property<long>("PersonQuestionnaireScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("PersonQuestionnaireID")
                        .HasColumnType("bigint");

                    b.Property<int>("QuestionnaireWindowID")
                        .HasColumnType("int");

                    b.Property<DateTime>("WindowDueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PersonQuestionnaireScheduleID");

                    b.HasIndex("PersonQuestionnaireID");

                    b.HasIndex("QuestionnaireWindowID");

                    b.ToTable("PersonQuestionnaireSchedule");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonRaceEthnicity", b =>
                {
                    b.Property<long>("PersonRaceEthnicityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<int>("RaceEthnicityID")
                        .HasColumnType("int");

                    b.HasKey("PersonRaceEthnicityID");

                    b.HasIndex("PersonID");

                    b.HasIndex("RaceEthnicityID");

                    b.ToTable("PersonRaceEthnicity");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonScreeningStatus", b =>
                {
                    b.Property<int>("PersonScreeningStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("PersonScreeningStatusId");

                    b.HasIndex("UpdateUserId");

                    b.ToTable("PersonScreeningStatus","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonSupport", b =>
                {
                    b.Property<int>("PersonSupportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Note")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<long>("PersonID")
                        .HasColumnType("bigint");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PhoneCode")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Suffix")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("SupportTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("PersonSupportID");

                    b.HasIndex("PersonID");

                    b.HasIndex("SupportTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("PersonSupport");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Questionnaire", b =>
                {
                    b.Property<int>("QuestionnaireID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstrumentID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsBaseQuestionnaire")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPubllished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherConfidentialityLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerUserID")
                        .HasColumnType("int");

                    b.Property<int?>("ParentQuestionnaireID")
                        .HasColumnType("int");

                    b.Property<string>("PersonRequestedConfidentialityLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReminderScheduleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequiredConfidentialityLanguage")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("Confidential");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("QuestionnaireID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("InstrumentID");

                    b.HasIndex("ParentQuestionnaireID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Questionnaire");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireItem", b =>
                {
                    b.Property<int>("QuestionnaireItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanOverrideLowerResponseBehavior")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("CanOverrideMedianResponseBehavior")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("CanOverrideUpperResponseBehavior")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOptional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<int?>("LowerItemResponseBehaviorID")
                        .HasColumnType("int");

                    b.Property<int?>("LowerResponseValue")
                        .HasColumnType("int");

                    b.Property<int?>("MedianItemResponseBehaviorID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionnaireItemIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID ( )");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.Property<int?>("UpperItemResponseBehaviorID")
                        .HasColumnType("int");

                    b.Property<int?>("UpperResponseValue")
                        .HasColumnType("int");

                    b.HasKey("QuestionnaireItemID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ItemID");

                    b.HasIndex("LowerItemResponseBehaviorID");

                    b.HasIndex("MedianItemResponseBehaviorID");

                    b.HasIndex("QuestionnaireID");

                    b.HasIndex("QuestionnaireItemIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UpdateUserID");

                    b.HasIndex("UpperItemResponseBehaviorID");

                    b.ToTable("QuestionnaireItem");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireItemHistory", b =>
                {
                    b.Property<int>("QuestionnaireItemHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InactiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InactiveStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionnaireItemID")
                        .HasColumnType("int");

                    b.HasKey("QuestionnaireItemHistoryID");

                    b.HasIndex("QuestionnaireItemID");

                    b.ToTable("QuestionnaireItemHistory");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireNotifyRiskRule", b =>
                {
                    b.Property<int>("QuestionnaireNotifyRiskRuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationLevelID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireNotifyRiskScheduleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("QuestionnaireNotifyRiskRuleID");

                    b.HasIndex("NotificationLevelID");

                    b.HasIndex("QuestionnaireNotifyRiskScheduleID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("QuestionnaireNotifyRiskRule");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireNotifyRiskRuleCondition", b =>
                {
                    b.Property<int>("QuestionnaireNotifyRiskRuleConditionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComparisonOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComparisonValue")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("JoiningOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireItemID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireNotifyRiskRuleID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("QuestionnaireNotifyRiskRuleConditionID");

                    b.HasIndex("QuestionnaireItemID");

                    b.HasIndex("QuestionnaireNotifyRiskRuleID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("QuestionnaireNotifyRiskRuleCondition");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireNotifyRiskSchedule", b =>
                {
                    b.Property<int>("QuestionnaireNotifyRiskScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("QuestionnaireNotifyRiskScheduleID");

                    b.HasIndex("QuestionnaireID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("QuestionnaireNotifyRiskSchedule");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireReminderRule", b =>
                {
                    b.Property<int>("QuestionnaireReminderRuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanRepeat")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireReminderTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("ReminderOffsetDays")
                        .HasColumnType("int");

                    b.Property<int?>("RepeatInterval")
                        .HasColumnType("int");

                    b.HasKey("QuestionnaireReminderRuleID");

                    b.HasIndex("QuestionnaireID");

                    b.HasIndex("QuestionnaireReminderTypeID");

                    b.ToTable("QuestionnaireReminderRule");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireReminderType", b =>
                {
                    b.Property<int>("QuestionnaireReminderTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationLevelID")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("QuestionnaireReminderTypeID");

                    b.HasIndex("NotificationLevelID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("QuestionnaireReminderType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireWindow", b =>
                {
                    b.Property<int>("QuestionnaireWindowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssessmentReasonID")
                        .HasColumnType("int");

                    b.Property<bool>("CanRepeat")
                        .HasColumnType("bit");

                    b.Property<int?>("DueDateOffsetDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<int?>("RepeatIntervalDays")
                        .HasColumnType("int");

                    b.Property<int?>("WindowCloseOffsetDays")
                        .HasColumnType("int");

                    b.Property<int?>("WindowOpenOffsetDays")
                        .HasColumnType("int");

                    b.HasKey("QuestionnaireWindowID");

                    b.HasIndex("AssessmentReasonID");

                    b.HasIndex("QuestionnaireID");

                    b.ToTable("QuestionnaireWindow");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.RaceEthnicity", b =>
                {
                    b.Property<int>("RaceEthnicityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("RaceEthnicityID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("RaceEthnicity","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ReportingUnit", b =>
                {
                    b.Property<int>("ReportingUnitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ParentAgencyID")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ReportingUnitIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("ReportingUnitID");

                    b.HasIndex("ParentAgencyID");

                    b.HasIndex("ReportingUnitIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UpdateUserID");

                    b.ToTable("ReportingUnit");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Response", b =>
                {
                    b.Property<int>("ResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BackgroundColorPaletteID")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultItemResponseBehaviorID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsItemResponseBehaviorDisabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ItemID")
                        .HasColumnType("int");

                    b.Property<string>("KeyCodes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<int?>("MaxRangeValue")
                        .HasColumnType("int");

                    b.Property<Guid>("ResponseIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID ( )");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("ResponseID");

                    b.HasIndex("ResponseIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Response");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ResponseValueType", b =>
                {
                    b.Property<int>("ResponseValueTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("ResponseValueTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("ResponseValueType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ReviewerHistory", b =>
                {
                    b.Property<int>("AssessmentReviewHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RecordedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusFrom")
                        .HasColumnType("int");

                    b.Property<int>("StatusTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("AssessmentReviewHistoryID")
                        .HasName("AssessmentReviewHistoryID");

                    b.HasIndex("StatusFrom");

                    b.HasIndex("StatusTo");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("ReviewerHistory");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("RolePermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleID")
                        .HasColumnType("int");

                    b.HasKey("RolePermissionID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("UserRoleID");

                    b.ToTable("RolePermission","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Sexuality", b =>
                {
                    b.Property<int>("SexualityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("SexualityID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("Sexuality","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SharingPolicy", b =>
                {
                    b.Property<int>("SharingPolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SharingPolicyID");

                    b.ToTable("SharingPolicy","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SupportAddress", b =>
                {
                    b.Property<int>("SupportAddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AddressID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<int>("SupportID")
                        .HasColumnType("int");

                    b.HasKey("SupportAddressID");

                    b.HasIndex("AddressID");

                    b.HasIndex("SupportID");

                    b.ToTable("SupportAddress");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SupportContact", b =>
                {
                    b.Property<int>("SupportContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int?>("ListOrder")
                        .HasColumnType("int");

                    b.Property<int>("SupportID")
                        .HasColumnType("int");

                    b.HasKey("SupportContactID");

                    b.HasIndex("ContactID");

                    b.HasIndex("SupportID");

                    b.ToTable("SupportContact");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SupportType", b =>
                {
                    b.Property<int>("SupportTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("SupportTypeID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("SupportType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SystemRole", b =>
                {
                    b.Property<int>("SystemRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int?>("UpdateUserID")
                        .HasColumnType("int");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("SystemRoleID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("SystemRole","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SystemRolePermission", b =>
                {
                    b.Property<int>("SystemRolePermissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionID")
                        .HasColumnType("int");

                    b.Property<int>("SystemRoleID")
                        .HasColumnType("int");

                    b.HasKey("SystemRolePermissionID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("SystemRoleID");

                    b.ToTable("SystemRolePermission","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.TherapyType", b =>
                {
                    b.Property<int>("TherapyTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResidential")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("TherapyTypeID");

                    b.HasIndex("AgencyID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("TherapyType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.TimeFrame", b =>
                {
                    b.Property<int>("TimeFrameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DaysInService")
                        .HasColumnType("int");

                    b.Property<decimal>("Month_Exact")
                        .HasColumnType("decimal(18,10)");

                    b.Property<int>("Months_Int")
                        .HasColumnType("int");

                    b.Property<int>("Qrt_Current")
                        .HasColumnType("int");

                    b.Property<decimal>("Qrts_Exact")
                        .HasColumnType("decimal(18,10)");

                    b.Property<int>("Qrts_Int")
                        .HasColumnType("int");

                    b.Property<string>("Timeframe_Std")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Years_Int")
                        .HasColumnType("int");

                    b.Property<decimal>("Yrs_Exact")
                        .HasColumnType("decimal(18,10)");

                    b.HasKey("TimeFrameID");

                    b.ToTable("TimeFrame","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AgencyID")
                        .HasColumnType("bigint");

                    b.Property<string>("AspNetUserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID ( )");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("UserIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("User");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SystemRoleID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<Guid>("UserRoleIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID ( )");

                    b.HasKey("UserRoleID");

                    b.HasIndex("SystemRoleID");

                    b.HasIndex("UserID");

                    b.HasIndex("UserRoleIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.VoiceType", b =>
                {
                    b.Property<int>("VoiceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbrev")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("ListOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UpdateUserID")
                        .HasColumnType("int");

                    b.HasKey("VoiceTypeID");

                    b.HasIndex("UpdateUserID");

                    b.ToTable("VoiceType","info");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.WeatherForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("int");

                    b.Property<int>("TemperatureF")
                        .HasColumnType("int");

                    b.Property<Guid>("WeatherForecastIndex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newid()");

                    b.HasKey("Id");

                    b.HasIndex("WeatherForecastIndex")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.RolesLookup", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("RolesLookup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Address", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "CountryState")
                        .WithMany()
                        .HasForeignKey("CountryStateId");

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Agency", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AgencyAddress", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AgencyContact", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AgencySharingHistory", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "ReportingUnitAgency")
                        .WithMany()
                        .HasForeignKey("ReportingUnitAgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ApplicationObject", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.ApplicationObjectType", "ApplicationObjectType")
                        .WithMany()
                        .HasForeignKey("ApplicationObjectTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ApplicationObjectType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AspNetUser", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyId");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Assessment", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.AssessmentReason", "AssessmentReason")
                        .WithMany()
                        .HasForeignKey("AssessmentReasonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.AssessmentStatus", "AssessmentStatus")
                        .WithMany()
                        .HasForeignKey("AssessmentStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.PersonQuestionnaire", "PersonQuestionnaire")
                        .WithMany()
                        .HasForeignKey("PersonQuestionnaireID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.PersonQuestionnaireSchedule", "PersonQuestionnaireSchedule")
                        .WithMany()
                        .HasForeignKey("PersonQuestionnaireScheduleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.VoiceType", "VoiceType")
                        .WithMany()
                        .HasForeignKey("VoiceTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentEmailLinkDetails", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Helper", "Helper")
                        .WithMany()
                        .HasForeignKey("HelperID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.PersonSupport", "PersonSupport")
                        .WithMany()
                        .HasForeignKey("PersonSupportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentNote", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.ReviewerHistory", "AssessmentReviewHistory")
                        .WithMany()
                        .HasForeignKey("AssessmentReviewHistoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Opeeka.PICS.Domain.Entities.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentReason", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentResponse", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.ItemResponseBehavior", "ItemResponseBehavior")
                        .WithMany()
                        .HasForeignKey("ItemResponseBehaviorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Opeeka.PICS.Domain.Entities.PersonSupport", "PersonSupport")
                        .WithMany()
                        .HasForeignKey("PersonSupportID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireItem", "QuestionnaireItem")
                        .WithMany()
                        .HasForeignKey("QuestionnaireItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Response", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentResponseNote", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.AssessmentResponse", "AssessmentResponse")
                        .WithMany()
                        .HasForeignKey("AssessmentResponseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentResponseText", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.AssessmentResponse", "AssessmentResponse")
                        .WithMany()
                        .HasForeignKey("AssessmentResponseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.AssessmentStatus", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "updateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Category", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CategoryFocus", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Collaboration", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.CollaborationLevel", "CollaborationLevel")
                        .WithMany()
                        .HasForeignKey("CollaborationLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.TherapyType", "TherapyType")
                        .WithMany()
                        .HasForeignKey("TherapyTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationAgencyAddress", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Collaboration", "Collaboration")
                        .WithMany()
                        .HasForeignKey("CollaborationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationLeadHistory", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Collaboration", "Collaboration")
                        .WithMany()
                        .HasForeignKey("CollaborationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationLevel", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationQuestionnaire", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Collaboration", "Collaboration")
                        .WithMany()
                        .HasForeignKey("CollaborationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationSharing", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Collaboration", "Collaboration")
                        .WithMany()
                        .HasForeignKey("CollaborationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.ReportingUnit", "ReportingUnit")
                        .WithMany()
                        .HasForeignKey("ReportingUnitID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationSharingHistory", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.CollaborationSharing", "ReportingUnitCollaboration")
                        .WithMany()
                        .HasForeignKey("ReportingUnitCollaborationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationSharingPolicy", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.CollaborationSharing", "CollaborationSharing")
                        .WithMany()
                        .HasForeignKey("CollaborationSharingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.SharingPolicy", "SharingPolicy")
                        .WithMany()
                        .HasForeignKey("SharingPolicyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationTag", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Collaboration", "Collaboration")
                        .WithMany()
                        .HasForeignKey("CollaborationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.CollaborationTagType", "CollaborationTagType")
                        .WithMany()
                        .HasForeignKey("CollaborationTagTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CollaborationTagType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ColorPalette", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Configuration", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.ConfigurationParameterContext", "ConfigurationParameterContext")
                        .WithMany()
                        .HasForeignKey("ConfigurationParameterContextID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ConfigurationAttachment", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Attachment", "Attachement")
                        .WithMany()
                        .HasForeignKey("AttachmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Configuration", "Configuration")
                        .WithMany()
                        .HasForeignKey("ConfigurationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ConfigurationContext", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.ConfigurationContext", "ParentContext")
                        .WithMany()
                        .HasForeignKey("ParentContextID");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ConfigurationParameter", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.ConfigurationValueType", "ConfigurationValueType")
                        .WithMany("ConfigurationParameters")
                        .HasForeignKey("ConfigurationValueTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ConfigurationParameterContext", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.ConfigurationContext", "ConfigurationContext")
                        .WithMany()
                        .HasForeignKey("ConfigurationContextID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.ConfigurationParameter", "ConfigurationParameter")
                        .WithMany()
                        .HasForeignKey("ConfigurationParameterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Contact", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ContactType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Country", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.CountryState", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Gender", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Helper", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.HelperTitle", "HelperTitle")
                        .WithMany()
                        .HasForeignKey("HelperTitleID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Opeeka.PICS.Domain.Entities.Helper", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Opeeka.PICS.Domain.Entities.Helper", "SupervisorHelper")
                        .WithMany()
                        .HasForeignKey("SupervisorHelperID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.HelperAddress", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Helper", "Helper")
                        .WithMany()
                        .HasForeignKey("HelperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.HelperContact", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Helper", "Helper")
                        .WithMany()
                        .HasForeignKey("HelperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.HelperTitle", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.IdentificationType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Instrument", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.InstrumentAgency", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Item", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.ItemResponseType", "ItemResponseType")
                        .WithMany()
                        .HasForeignKey("ItemResponseTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.ResponseValueType", "ResponseValueType")
                        .WithMany()
                        .HasForeignKey("ResponseValueTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ItemResponseBehavior", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.ItemResponseType", "ItemResponseType")
                        .WithMany()
                        .HasForeignKey("ItemResponseTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ItemResponseType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Language", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Note", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationDelivery", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationLog", "NotificationLog")
                        .WithMany()
                        .HasForeignKey("NotificationLogID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationTemplate", "NotificationTemplate")
                        .WithMany()
                        .HasForeignKey("NotificationTemplateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationLevel", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationLog", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationResolutionStatus", "NotificationResolutionStatus")
                        .WithMany()
                        .HasForeignKey("NotificationResolutionStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationResolutionHistory", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationLog", "NotificationLog")
                        .WithMany()
                        .HasForeignKey("NotificationLogID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationResolutionStatus", "StatusFromNavigation")
                        .WithMany()
                        .HasForeignKey("StatusFrom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationResolutionStatus", "StatusToNavigation")
                        .WithMany()
                        .HasForeignKey("StatusTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationResolutionNote", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Note", "Note")
                        .WithMany()
                        .HasForeignKey("Note_NoteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationLog", "NotificationLog")
                        .WithMany()
                        .HasForeignKey("NotificationLogID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationResolutionHistory", "NotificationResolutionHistory")
                        .WithMany()
                        .HasForeignKey("NotificationResolutionHistoryID");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationResolutionStatus", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationTemplate", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationLevel", "NotificationLevel")
                        .WithMany()
                        .HasForeignKey("NotificationLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationMode", "NotificationMode")
                        .WithMany()
                        .HasForeignKey("NotificationModeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotificationType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotifyReminder", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.PersonQuestionnaireSchedule", "PersonQuestionnaireSchedule")
                        .WithMany()
                        .HasForeignKey("PersonQuestionnaireScheduleID");

                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireReminderRule", "QuestionnaireReminderRule")
                        .WithMany()
                        .HasForeignKey("QuestionnaireReminderRuleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotifyRisk", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireNotifyRiskRule", "QuestionnaireNotifyRiskRule")
                        .WithMany()
                        .HasForeignKey("QuestionnaireNotifyRiskRuleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotifyRiskRule", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationLevel", "NotificationLevel")
                        .WithMany()
                        .HasForeignKey("NotificationLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireItem", "QuestionnaireItem")
                        .WithMany()
                        .HasForeignKey("QuestionnaireItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.NotifyRiskValue", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.AssessmentResponse", "AssessmentResponse")
                        .WithMany()
                        .HasForeignKey("AssessmentResponseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.NotifyRisk", "NotifyRisk")
                        .WithMany()
                        .HasForeignKey("NotifyRiskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireNotifyRiskRuleCondition", "QuestionnaireNotifyRiskRuleCondition")
                        .WithMany()
                        .HasForeignKey("QuestionnaireNotifyRiskRuleConditionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.OperationType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Permission", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.ApplicationObject", "ApplicationObject")
                        .WithMany()
                        .HasForeignKey("ApplicationObjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.OperationType", "OperationType")
                        .WithMany()
                        .HasForeignKey("OperationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Person", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Gender", "BiologicalSex")
                        .WithMany()
                        .HasForeignKey("BiologicalSexID");

                    b.HasOne("Opeeka.PICS.Domain.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID");

                    b.HasOne("Opeeka.PICS.Domain.Entities.PersonScreeningStatus", "PersonScreeningStatus")
                        .WithMany()
                        .HasForeignKey("PersonScreeningStatusID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Language", "PreferredLanguage")
                        .WithMany()
                        .HasForeignKey("PreferredLanguageID");

                    b.HasOne("Opeeka.PICS.Domain.Entities.Language", "PrimaryLanguage")
                        .WithMany()
                        .HasForeignKey("PrimaryLanguageID");

                    b.HasOne("Opeeka.PICS.Domain.Entities.Sexuality", "Sexuality")
                        .WithMany()
                        .HasForeignKey("SexualityID");

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonAddress", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonCollaboration", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Collaboration", "Collaboration")
                        .WithMany()
                        .HasForeignKey("CollaborationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonContact", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonHelper", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Helper", "Helper")
                        .WithMany()
                        .HasForeignKey("HelperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonIdentification", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.IdentificationType", "IdentificationType")
                        .WithMany()
                        .HasForeignKey("IdentificationTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonLanguage", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonNote", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonQuestionnaire", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Collaboration", "Collaboration")
                        .WithMany()
                        .HasForeignKey("CollaborationID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonQuestionnaireSchedule", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.PersonQuestionnaire", "PersonQuestionnaire")
                        .WithMany()
                        .HasForeignKey("PersonQuestionnaireID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireWindow", "QuestionnaireWindow")
                        .WithMany()
                        .HasForeignKey("QuestionnaireWindowID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonRaceEthnicity", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.RaceEthnicity", "RaceEthnicity")
                        .WithMany()
                        .HasForeignKey("RaceEthnicityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonScreeningStatus", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.PersonSupport", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.SupportType", "SupportType")
                        .WithMany()
                        .HasForeignKey("SupportTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Questionnaire", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Opeeka.PICS.Domain.Entities.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Questionnaire", "ParentQuestionnaire")
                        .WithMany()
                        .HasForeignKey("ParentQuestionnaireID");

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireItem", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.ItemResponseBehavior", "LowerItemResponseBehavior")
                        .WithMany()
                        .HasForeignKey("LowerItemResponseBehaviorID");

                    b.HasOne("Opeeka.PICS.Domain.Entities.ItemResponseBehavior", "MedianItemResponseBehavior")
                        .WithMany()
                        .HasForeignKey("MedianItemResponseBehaviorID");

                    b.HasOne("Opeeka.PICS.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.ItemResponseBehavior", "UpperItemResponseBehavior")
                        .WithMany()
                        .HasForeignKey("UpperItemResponseBehaviorID");
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireItemHistory", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireItem", "QuestionnaireItem")
                        .WithMany()
                        .HasForeignKey("QuestionnaireItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireNotifyRiskRule", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationLevel", "NotificationLevel")
                        .WithMany()
                        .HasForeignKey("NotificationLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireNotifyRiskSchedule", "QuestionnaireNotifyRiskSchedule")
                        .WithMany()
                        .HasForeignKey("QuestionnaireNotifyRiskScheduleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireNotifyRiskRuleCondition", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireItem", "QuestionnaireItem")
                        .WithMany()
                        .HasForeignKey("QuestionnaireItemID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireNotifyRiskRule", "QuestionnaireNotifyRiskRule")
                        .WithMany()
                        .HasForeignKey("QuestionnaireNotifyRiskRuleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireNotifyRiskSchedule", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireReminderRule", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.QuestionnaireReminderType", "QuestionnaireReminderType")
                        .WithMany()
                        .HasForeignKey("QuestionnaireReminderTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireReminderType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.NotificationLevel", "NotificationLevel")
                        .WithMany()
                        .HasForeignKey("NotificationLevelID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.QuestionnaireWindow", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.AssessmentReason", "AssessmentReason")
                        .WithMany()
                        .HasForeignKey("AssessmentReasonID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.RaceEthnicity", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ReportingUnit", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "ParentAgency")
                        .WithMany()
                        .HasForeignKey("ParentAgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Response", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ResponseValueType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.ReviewerHistory", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.AssessmentStatus", "StatusFromNavigation")
                        .WithMany()
                        .HasForeignKey("StatusFrom")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.AssessmentStatus", "StatusToNavigation")
                        .WithMany()
                        .HasForeignKey("StatusTo")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.Sexuality", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SupportAddress", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.PersonSupport", "Support")
                        .WithMany()
                        .HasForeignKey("SupportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SupportContact", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.PersonSupport", "Support")
                        .WithMany()
                        .HasForeignKey("SupportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SupportType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SystemRole", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.SystemRolePermission", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.SystemRole", "SystemRole")
                        .WithMany()
                        .HasForeignKey("SystemRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.TherapyType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.Agency", "Agency")
                        .WithMany()
                        .HasForeignKey("AgencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.SystemRole", "SystemRole")
                        .WithMany()
                        .HasForeignKey("SystemRoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Opeeka.PICS.Domain.Entities.VoiceType", b =>
                {
                    b.HasOne("Opeeka.PICS.Domain.Entities.User", "UpdateUser")
                        .WithMany()
                        .HasForeignKey("UpdateUserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
